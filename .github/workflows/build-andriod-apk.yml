name: Flutter Build and Upload Android APK

on:
  push:                 # This is the condition that the action will run on
    branches: [ main ]  # In this case when you push your code into GitHub
    # tags:
    # - "v*.*.*"          # In this case when you tag your commit with v1.0.0 for example

jobs:
  build:
    runs-on: ubuntu-latest  # This is the type of machine we want to run the action on
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3     # Checkout the Repository on the Virtual Machine

      - name: Set up JDK              # Setup JAVA to build the Android APK for us
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: microsoft

      #  Decode keystore File from repository secrets
      #  Keep the keystore file private; donâ€™t check it into public source control!
      
      #- name: Decode KeyStore File (.jks)            
      #  run: echo "${{ secrets.KEYSTORE_JKS_PROD }}" | base64 --decode > android/keystore.jks

      #- name: Decode android/key.properties
      #  run: echo "${{ secrets.KEY_PROPERTIES_PROD }}" | base64 --decode > android/key.properties
      
      - name: Set Kotlin version
        run: echo "KOTLIN_VERSION=1.9.23" >> $GITHUB_ENV
        
      - name: Install yq
        uses: mikefarah/yq@v4.42.1

      - name: Get pubspec version
        id: get_flutter_app_version
        run: |
          VERSION=$(yq .version | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' pubspec.yaml | head -n 1)
          echo "TAG_VERSION=$VERSION" >> $GITHUB_OUTPUT
  
      - name: Create git tag
        run: |
          git tag "v${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}"

      - name: Install Flutter               # Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'main'

      - name: Clean Flutter Build
        run: flutter clean
        
      - name: Get Flutter dependencies      # Get the Libraries and Dependencies
        run: flutter pub get

      - name: Build APK Release             # Build a release
        run: flutter build apk --release

      - name: Build an AppBundle            # App Bundles are useful for Google Play Store
        run: flutter build appbundle --release

      - name: Save APK to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: flutter-apk
          path: build/app/outputs/flutter-apk/*.apk

      - name: Save APPBUNDLE to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flutter-appbundle
          path: build/app/outputs/bundle/release/*.aab

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}" >/dev/null 2>&1; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Adjust Tag Version
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          # Example: Increment patch version if the tag already exists
          PATCH_VERSION=$(echo ${{ steps.get_flutter_app_version.outputs.TAG_VERSION }} | awk -F '.' '{print $3+1}')
          NEW_TAG_VERSION="${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}.${PATCH_VERSION}"
          echo "::set-output name=TAG_VERSION::$NEW_TAG_VERSION"
        id: new_version

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.new_version.outputs.TAG_VERSION }}
          artifacts: "build/app/outputs/bundle/release/*.aab,build/app/outputs/flutter-apk/*.apk"
          # token: ${{ secrets.PERSONAL_RELEASE_TOKEN }}
